import type { OutfitterConfig, RightdownConfig } from '../types/index.js';

/**
 * Generates rightdown configuration from OutfitterConfig
 */
export function generateRightdownConfig(config: OutfitterConfig): RightdownConfig {
  const { strictness, overrides } = config;

  // Base configuration - start with preset based on strictness
  const baseConfig: RightdownConfig = {
    // Use strictness level to determine preset
    preset:
      strictness === 'pedantic' ? 'strict' : strictness === 'relaxed' ? 'relaxed' : 'standard',

    // Default terminology corrections for technical documentation
    terminology: [
      { incorrect: 'NPM', correct: 'npm' },
      { incorrect: 'Javascript', correct: 'JavaScript' },
      { incorrect: 'Typescript', correct: 'TypeScript' },
      { incorrect: 'VSCode', correct: 'VS Code' },
      { incorrect: 'MacOS', correct: 'macOS' },
      { incorrect: 'Github', correct: 'GitHub' },
      { incorrect: 'gitlab', correct: 'GitLab' },
      { incorrect: 'nodejs', correct: 'Node.js' },
      { incorrect: 'react native', correct: 'React Native' },
    ],

    // Custom rules from rightdown
    customRules: ['./node_modules/@outfitter/rightdown/dist/rules/consistent-terminology.js'],

    // Default ignore patterns
    ignores: [
      'node_modules/**',
      '.git/**',
      'dist/**',
      'build/**',
      'coverage/**',
      'CHANGELOG.md', // Often auto-generated
      '*.min.md',
    ],
  };

  // Apply tool-specific overrides if provided
  if (overrides?.rightdown) {
    return {
      ...baseConfig,
      ...overrides.rightdown,
      // Special handling for arrays that should be merged rather than replaced
      terminology: Array.isArray(overrides.rightdown.terminology)
        ? [...(baseConfig.terminology || []), ...overrides.rightdown.terminology]
        : baseConfig.terminology,
      customRules: Array.isArray(overrides.rightdown.customRules)
        ? [...(baseConfig.customRules || []), ...overrides.rightdown.customRules]
        : baseConfig.customRules,
      ignores: Array.isArray(overrides.rightdown.ignores)
        ? [...(baseConfig.ignores || []), ...overrides.rightdown.ignores]
        : baseConfig.ignores,
    };
  }

  return baseConfig;
}

/**
 * Generates a well-documented JSONC configuration file content
 */
export function generateRightdownConfigContent(config: OutfitterConfig): string {
  const mdConfig = generateRightdownConfig(config);

  const lines: Array<string> = [];

  lines.push('{');
  lines.push('  // rightdown configuration');
  lines.push(`  // Generated by @outfitter/baselayer with strictness: ${config.strictness}`);
  lines.push('  // Docs: https://github.com/DavidAnson/markdownlint-cli2');
  lines.push('');

  // Convert config to JSONC with inline documentation
  Object.entries(mdConfig).forEach(([key, value], index, arr) => {
    const isLast = index === arr.length - 1;

    switch (key) {
      case 'preset':
        lines.push('  // Base preset to extend from');
        lines.push(`  "${key}": ${JSON.stringify(value)}${isLast ? '' : ','}`);
        break;

      case 'terminology':
        lines.push('  // Custom terminology corrections');
        lines.push('  // Format: [{ "incorrect": "bad", "correct": "good" }]');
        lines.push(
          `  "${key}": ${JSON.stringify(value, null, 2).replace(/\n/g, '\n  ')}${isLast ? '' : ','}`,
        );
        break;

      case 'customRules':
        lines.push('  // Additional custom rules to load');
        lines.push('  // Paths to JavaScript files exporting markdownlint rules');
        lines.push(
          `  "${key}": ${JSON.stringify(value, null, 2).replace(/\n/g, '\n  ')}${isLast ? '' : ','}`,
        );
        break;

      case 'ignores':
        lines.push('  // Files and patterns to ignore');
        lines.push('  // Supports glob patterns like "docs/legacy/**"');
        lines.push(
          `  "${key}": ${JSON.stringify(value, null, 2).replace(/\n/g, '\n  ')}${isLast ? '' : ','}`,
        );
        break;

      default:
        // Handle markdownlint rules
        if (typeof value === 'boolean') {
          lines.push(`  // Rule: ${key} - ${value ? 'enabled' : 'disabled'}`);
        } else if (typeof value === 'object' && value !== null) {
          lines.push(`  // Rule: ${key} - configured with options`);
        } else {
          lines.push(`  // Rule: ${key}`);
        }
        lines.push(
          `  "${key}": ${JSON.stringify(value, null, 2).replace(/\n/g, '\n  ')}${isLast ? '' : ','}`,
        );
        break;
    }

    if (!isLast) {
      lines.push('');
    }
  });

  lines.push('}');
  return lines.join('\n');
}
