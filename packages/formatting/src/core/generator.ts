/**
 * Configuration file generator
 */

import { stringify as stringifyYaml } from 'yaml';
import type { PresetConfig, FormatterType, GeneratedConfig } from '../types/index.js';
import type { Result } from '@outfitter/contracts';
import { success, failure, makeError } from '@outfitter/contracts';

// Import config generators - using require for CJS compatibility during tests
import prettierConfigModule from '@outfitter/prettier-config';
// @ts-ignore - Build outputs may not exist during development
import biomeConfigModule from '@outfitter/biome-config';
import { generate as generateRemarkConfig } from '@outfitter/remark-config';

// Handle both CJS and ESM exports
const generatePrettierConfig = (prettierConfigModule as any).generate || prettierConfigModule;
const generateBiomeConfig = (biomeConfigModule as any).generate || biomeConfigModule.generate;

/**
 * Generate configuration files for available formatters
 */
export async function generateConfigs(
  formatters: FormatterType[],
  preset: PresetConfig
): Promise<Result<GeneratedConfig[], Error>> {
  try {
    const configs: GeneratedConfig[] = [];

    for (const formatter of formatters) {
      const configResult = await generateFormatterConfig(formatter, preset);
      if (configResult.success) {
        configs.push(configResult.data);
      } else {
        return failure(configResult.error);
      }
    }

    return success(configs);
  } catch (error) {
    return failure(makeError(
      'OPERATION_FAILED',
      'Failed to generate configuration files',
      { cause: error }
    ));
  }
}

/**
 * Generate configuration for a specific formatter
 */
export async function generateFormatterConfig(
  formatter: FormatterType,
  preset: PresetConfig
): Promise<Result<GeneratedConfig, Error>> {
  try {
    switch (formatter) {
      case 'prettier':
        return generatePrettierConfigFile(preset);
      case 'biome':
        return generateBiomeConfigFile(preset);
      case 'remark':
        return generateRemarkConfigFile(preset);
      default:
        return failure(makeError(
          'VALIDATION_ERROR',
          `Unknown formatter: ${formatter}`
        ));
    }
  } catch (error) {
    return failure(makeError(
      'OPERATION_FAILED',
      `Failed to generate ${formatter} configuration`,
      { cause: error }
    ));
  }
}

/**
 * Generate Prettier configuration file
 */
function generatePrettierConfigFile(preset: PresetConfig): Result<GeneratedConfig, Error> {
  try {
    const config = generatePrettierConfig(preset);
    
    const content = JSON.stringify(config, null, 2) + '\n';
    const header = `// Generated by @outfitter/formatting\n// Preset: ${preset.name}\n\n`;
    
    return success({
      path: '.prettierrc.json',
      content: header + content,
      formatter: 'prettier',
      generated: true,
    });
  } catch (error) {
    return failure(makeError(
      'OPERATION_FAILED',
      'Failed to generate Prettier configuration',
      { cause: error }
    ));
  }
}

/**
 * Generate Biome configuration file
 */
function generateBiomeConfigFile(preset: PresetConfig): Result<GeneratedConfig, Error> {
  try {
    const config = generateBiomeConfig(preset);
    
    const content = JSON.stringify(config, null, 2) + '\n';
    
    return success({
      path: 'biome.json',
      content,
      formatter: 'biome',
      generated: true,
    });
  } catch (error) {
    return failure(makeError(
      'OPERATION_FAILED',
      'Failed to generate Biome configuration',
      { cause: error }
    ));
  }
}

/**
 * Generate Remark configuration file
 */
function generateRemarkConfigFile(preset: PresetConfig): Result<GeneratedConfig, Error> {
  try {
    // Map preset to remark preset name
    const remarkPresetName = mapPresetToRemarkPreset(preset.name);
    const config = generateRemarkConfig({ preset: remarkPresetName });
    
    // Generate YAML configuration
    const yamlConfig = {
      plugins: config.plugins,
      settings: config.settings,
    };
    
    const content = `# Generated by @outfitter/formatting\n# Preset: ${preset.name}\n\n${stringifyYaml(yamlConfig)}`;
    
    return success({
      path: '.remarkrc.yaml',
      content,
      formatter: 'remark',
      generated: true,
    });
  } catch (error) {
    return failure(makeError(
      'OPERATION_FAILED',
      'Failed to generate Remark configuration',
      { cause: error }
    ));
  }
}

/**
 * Generate package.json scripts for formatters
 */
export function generatePackageJsonScripts(formatters: FormatterType[]): Record<string, string> {
  const scripts: Record<string, string> = {};
  
  // Generate individual formatter scripts
  for (const formatter of formatters) {
    switch (formatter) {
      case 'prettier':
        scripts['format:prettier'] = 'prettier --write .';
        scripts['format:prettier:check'] = 'prettier --check .';
        break;
      case 'biome':
        scripts['format:biome'] = 'biome format --write .';
        scripts['format:biome:check'] = 'biome format .';
        scripts['lint:biome'] = 'biome lint .';
        scripts['lint:biome:fix'] = 'biome lint --write .';
        break;
      case 'remark':
        scripts['format:markdown'] = 'remark . --output';
        scripts['format:markdown:check'] = 'remark . --frail';
        break;
    }
  }
  
  // Generate combined scripts if multiple formatters
  if (formatters.length > 1) {
    const formatCommands = [];
    const checkCommands = [];
    
    if (formatters.includes('prettier')) {
      formatCommands.push('pnpm format:prettier');
      checkCommands.push('pnpm format:prettier:check');
    }
    
    if (formatters.includes('biome')) {
      formatCommands.push('pnpm format:biome');
      checkCommands.push('pnpm format:biome:check');
    }
    
    if (formatters.includes('remark')) {
      formatCommands.push('pnpm format:markdown');
      checkCommands.push('pnpm format:markdown:check');
    }
    
    if (formatCommands.length > 0) {
      scripts['format'] = formatCommands.join(' && ');
      scripts['format:check'] = checkCommands.join(' && ');
    }
  } else if (formatters.length === 1) {
    // Single formatter - create simple aliases
    const formatter = formatters[0];
    switch (formatter) {
      case 'prettier':
        scripts['format'] = 'prettier --write .';
        scripts['format:check'] = 'prettier --check .';
        break;
      case 'biome':
        scripts['format'] = 'biome format --write .';
        scripts['format:check'] = 'biome format .';
        scripts['lint'] = 'biome lint .';
        scripts['lint:fix'] = 'biome lint --write .';
        break;
      case 'remark':
        scripts['format'] = 'remark . --output';
        scripts['format:check'] = 'remark . --frail';
        break;
    }
  }
  
  return scripts;
}

/**
 * Map formatting preset to remark preset
 */
function mapPresetToRemarkPreset(preset: PresetConfig['name']): 'standard' | 'strict' | 'relaxed' {
  return preset; // Direct mapping for now
}